{
  "className": "Python_Classes_and_Modules",
  "url": "https://docs.derivative.ca/Python_Classes_and_Modules",
  "content": {
    "title": "Python Classes and Modules",
    "items": {
      "toc": {
        "title": "Contents\n1 Operator Related Classes\n2 Helper Classes\n3 Standard Python Modules\n4 TouchDesigner Utility Modules and Python Utilities\n5 3rd Party Packages\n6 Installing Custom Packages and Modules",
        "content": "The following list of important Python classes and modules is roughly grouped together by subject. Python Reference has an alphabetical list of all TouchDesigner Python pages on this wiki."
      },
      "toctogglecheckbox": {
        "title": "",
        "content": "Contents 1 Operator Related Classes\n2 Helper Classes\n3 Standard Python Modules\n4 TouchDesigner Utility Modules and Python Utilities\n5 3rd Party Packages\n6 Installing Custom Packages and Modules The following list of important Python classes and modules is roughly grouped together by subject. Python Reference has an alphabetical list of all TouchDesigner Python pages on this wiki."
      },
      "mw-toc-heading": {
        "title": "Contents",
        "content": "1 Operator Related Classes\n2 Helper Classes\n3 Standard Python Modules\n4 TouchDesigner Utility Modules and Python Utilities\n5 3rd Party Packages\n6 Installing Custom Packages and Modules The following list of important Python classes and modules is roughly grouped together by subject. Python Reference has an alphabetical list of all TouchDesigner Python pages on this wiki."
      },
      "Operator_Related_Classes": {
        "title": "Operator Related Classes",
        "content": "[edit] The following classes are Python interfaces for operators and objects that operators use. Individual operator classes (e.g. TextTOP Class and RampTOP Class) are not listed but do exist in the td module, and links to each can be found here or by clicking on the Python Help button in their parameter dialog. These classes are found in the td module so do not need to be imported. OP Class - a TouchDesigner operator.\nConnector Class - a wire connector for an OP. Lists of these can be found in OP.inputConnectors and OP.outputConnectors. Components also have COMP.inputCOMPConnectors and COMP.outputCOMPConnectors.\nPage Class - a parameter page. Lists of these can be found in OP.pages and, on components and script operators, OP.customPages.\nParCollection Class (OP.par) - holds all the parameters for an OP.\nPar Class - an individual parameter.\nParGroupCollection Class (OP.par) - holds all the parameter groups for an OP.\nParGroup Class - an individual parameter group.\nSequenceCollection Class (OP.seq) - holds all the sequences for an OP.\nSequence Class - describes and controls a set of sequential parameters. Sequential parameters will have a reference to one of these objects in their sequence member.\nSequenceBlock Class - used to access the parGroups of a specific block (set of parGroups) in a sequence.\nCHOP Class - subclass of OPs defining CHOP operators.\nChannel Class - a channel object. Accessed through a CHOP index or other CHOP members such as chan, chans etc.\nSegment Class - describes a single segment from a Timer CHOP.\nCOMP Class - a subclass of OPs defining component operators.\nObjectCOMP Class - a subclass of COMPs defining Objects, used to create and render 3D scenes.\nPanelCOMP Class - a subclass of COMPS defining Panel Components, used to create 2D UI elements.\nPanel Class - a member of panelCOMPs containing all associated panel values. Accessed through panelCOMP.panel.\nPanelValue Class - individual panel values. Accessed through the panel member of panelCOMPS and also in callbacks in the Panel Execute DAT.\nListAttributes Class - a collection of list attributes used in a ListCOMP.\nListAttribute Class - contains attributes defining a cell in a ListCOMP.\nActors Class - describes the set of all Actor COMPs used by the Bullet Solver COMP and Nvidia Flex Solver COMP. used in a BulletsolverCOMP or flexsolverCOMP.\nBodies Class - a collection of bodies used in an ActorCOMP.\nBody Class - a single body (physics object) used in an ActorCOMP.\nVFS Class - a COMP's Virtual File System\nVFSFile Class - a virtual file contained within a Virtual File System.\nDAT Class - a subclass of OPs defining DAT operators.\nCell Class - defines an individual cell of a DAT table.\nPeer Class - describes the network connection originating a message in the callback functions found in oscinDAT, tcpipDAT, udpinDAT, udtinDAT.\nMAT Class - a subclass of OPs defining MAT operators.\nSOP Class - a subclass of OPs defining SOP operators.\nAttributes Class - a collection of SOP attributes\nAttribute Class - information about an entity such as its color, velocity, normal, and so on.\nAttributeData Class - contains specific geometric Attribute values, associated with a Prim Class, Point Class, or Vertex Class.\nGroup Class - describes groups lists of Prim Class or Point Class.\nPoints Class - a collection of points.\nPoint Class - a single geometry point.\nInputPoint Class - a special point object used in Point SOP parameters.\nPrims Class - a collection of primitives.\nPrim Class - a single geometry primitive.\nPoly Class - a subclass of Prim defining a geometry polygon.\nMesh Class - a subclass of Prim defining a geometry mesh.\nBezier Class - a subclass of Prim defining a set of Bezier curves.\nVertex Class - a member of Prim defining a single geometry vertex.\nTOP Class - a subclass of OPs defining TOP operators.\nCUDAMemory Class - holds a reference to CUDA memory.\nCUDAMemoryShape Class - describes the shape of a CUDA memory segment.\nTextLine Class - a line of text in the Text TOP or Text SOP, after it has been formatted. Contains various members about the line such as it's text, position etc."
      },
      "Helper_Classes": {
        "title": "Helper Classes",
        "content": "[edit] The following helper objects are part of the td module and can thus be accessed anywhere, including expressions, without imports (e.g. absTime.frame). AbsTime Class (absTime) - information about absolute time\nApp Class (app) - information about the TouchDesigner app, including version, installation folders, etc.\nProject Class (project) - information about the current TouchDesigner session\nTdu Module (tdu) - generic utilities for TouchDesigner not relating directly to TD objects.\nArcBall Class (tdu.ArcBall) - encapsulates many aspects of 3D viewer interaction.\nCamera Class (tdu.Camera) - maintains a 3D position and orientation for a camera and provides multiple methods for manipulating the camera's position and direction.\nColor Class (tdu.Color) - holds a 4 component color\nDependency Class (tdu.Dependency) - used to create Dependable Python data.\nMatrix Class (tdu.Matrix) - holds a single 4x4 matrix for use in transformations. See ObjectCOMP Class for transforms of 3D objects.\nPosition Class (tdu.Position) - holds a 3 component position\nQuaternion Class (tdu.Quaternion) - holds a quaternion object for 3D rotations\nTimecode Class (tdu.Timecode) - holds a timecode value\nVector Class (tdu.Vector) - holds a 3 component vector Licenses Class (licenses) - information about installed license objects\nDongleList Class (licenses.dongles) - list of attached dongles\nDongle Class - an individual dongle connected to the system\nLicense Class - a single instance of an installed license\nProductEntry Class - a dongle entry for a single dongle connected to the system\nMOD Class (mod) - access to modules located in TouchDesigner DATs\nMonitors Class (monitors) - access to information about all connected display devices\nMonitor Class - an individual display device\nRuns Class (runs) - information about all delayed run objects\nRun Class - an individual delayed run object\nSysInfo Class (sysInfo) - current system/hardware information\nUI Class (ui) - information about application ui elements\nColors Class (ui.colors) - application colors\nOptions Class (ui.options) - configurable ui options\nPanes Class (ui.panes) - collection of all panes open in the editor\nPane Class - an individual pane object\nNetworkEditor Class - subclass of Pane that displays a network editor\nPreferences Class (ui.preferences) - collection of TouchDesigner preferences\nUndo Class (ui.undo) - tools for interacting with the undo system, including creating script-based undo steps"
      },
      "Standard_Python_Modules": {
        "title": "Standard Python Modules",
        "content": "[edit] The td module also automatically imports a number of helpful standard modules, allowing them to be accessed in expressions through their namespace (e.g. math.cos(math.pi)): collections - container datatypes\nenum - support for enumerations\ninspect - inspect live objects\nmath - mathematical functions\nre - regular expression operations\nsys - OS specific data and functions\ntraceback - stack utilities\nwarnings - warning control"
      },
      "TouchDesigner_Utility_Modules_and_Python_Utilities": {
        "title": "TouchDesigner Utility Modules and Python Utilities",
        "content": "[edit] The following contain extended Python utilities for use with TouchDesigner. TDFunctions - A variety of utilities for advanced Python coding in TouchDesigner.\nTDJSON - JSON utilities specific to TouchDesigner.\nTDStoreTools - utilities for use with TouchDesigner's Storage and Dependency system.\nTDResources (op.TDResources...) - not a module, but does contain system resources that can be accessed via Python. It includes system pop-up menu, button pop-up menu, pop-up dialog, and mouse resources."
      },
      "3rd_Party_Packages": {
        "title": "3rd Party Packages",
        "content": "[edit] The following 3rd party packages are automatically installed with TouchDesigner. They are not in the td module, so must be imported explicitly to be used in scripts. The name in parentheses is the actual package name used (e.g. to use OpenCV, write this at top of script: import cv2). For information on adding or installing other Python modules, see Importing Modules. attr 22.2.0 (attr) - Classes without boilerplate (legacy).\nattrs 22.2.0 (attrs) - Classes without boilerplate.\nCertifi 2022.12.07 (certifi) - Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts.\nChardet 5.1.0 (chardet) - The Universal Character Encoding Detector.\ncharset-normalizer 3.0.1 (charset_normalizer) - A library that helps you read text from an unknown charset encoding.\ndecorator 5.1.1 (decorator) - Define signature-preserving function decorators and decorator factories.\nopencv-python (cv2) 4.8.0 - Pre-built CPU-only OpenCV packages for Python.\ndepthai (depthai) 2.24.0.0.dev0+7b57b28305368582d004d5c6ec2cffb66562f2e0 - Python bindings for C++ depthai-core library.\nidna (idna) 3.4 - Support for the Internationalised Domain Names in Applications (IDNA) protocol.\njsonpath (jsonpath_ng) 1.5.3 - JSONPath tools for accessing and altering JSON structures.\njsonschema (jsonschema) 4.23.0 - jsonschema is an implementation of the JSON Schema specification for Python.\nMWParserFromHell (mwparserfromhell) 0.6.4 - An easy-to-use and outrageously powerful parser for MediaWiki wikicode.\nNumPy (numpy) 1.24.1 - Fundamental package for scientific computing with Python.\nOAuthlib (oauthlib) 3.2.2 - Library to build OAuth and OpenID Connect servers.\npackaging (packaging) 23.0 - Package tools including version handling, specifiers, markers, requirements, tags, utilities. Used for version string comparison.\npip (pip) 22.3.1 - pip is the package installer for Python. You can use pip to install packages from the Python Package Index and other indexes.\nply (ply) 3.11 - Parsing tools for lex and yacc.\nPygments (pygments) 2.14.0 - A syntax highlighting package written in Python.\npyparsing (pyparsing) 3.0.9 - A library of classes that client code uses to construct parsing grammar directly in Python code.\npyrankvote (pyrankvote) 2.0.5 - PyRankVote is a python library for different ranked-choice voting systems (sometimes called preferential voting systems) created by Jon Tingvold in June 2019.\npyrfc6266 (pyrfc6266) 1.0.2 - A python implementation of RFC 6266.\npyrsistent (pyrsistent) 0.19.3 - Pyrsistent is a number of persistent collections (by some referred to as functional data structures). Persistent in the sense that they are immutable.\nRequests (requests) 2.28.2 - The only Non-GMO HTTP library for Python, safe for human consumption\nRequests OAuthlib (requests_oauthlib) 1.3.1 - Easy-to-use Python interface for building OAuth1 and OAuth2 clients\nsix (six) 1.16.0 - Python 2 and 3 compatibility utilities.\nsmartypants (smartypants) 2.0.1 - a Python fork of SmartyPants.\ntabulate (tabulate) 0.9.0 - Pretty-print tabular data in Python.\nurllib3 (urllib3) 1.26.14 - HTTP client.\nwhats-that-code (whats_that_code) 0.1.4 - programming language detection library.\nPyYAML (yaml) 6.0 - YAML parser and emitter."
      },
      "Installing_Custom_Packages_and_Modules": {
        "title": "Installing Custom Packages and Modules",
        "content": "[edit] You can also install your own Python packages that are not included with TouchDesigner. For instructions, go here."
      }
    }
  }
}