{
  "className": "Undo_Class",
  "url": "https://docs.derivative.ca/Undo_Class",
  "content": {
    "title": "Undo Class",
    "items": {
      "toc": {
        "title": "Contents\n\n1 Members\n2 Methods\n3 Undo Block Examples\n\n3.1 Undo Callbacks",
        "content": ""
      },
      "toctogglecheckbox": {
        "title": "",
        "content": "Contents 1 Members\n2 Methods\n3 Undo Block Examples\n\n3.1 Undo Callbacks"
      },
      "mw-toc-heading": {
        "title": "Contents",
        "content": "1 Members\n2 Methods\n3 Undo Block Examples\n\n3.1 Undo Callbacks"
      },
      "Members": {
        "title": "Members",
        "content": ""
      },
      "globalState": {
        "title": "",
        "content": "globalState → bool : Is global undo enabled or not."
      },
      "redoStack": {
        "title": "",
        "content": "redoStack → list (Read Only): A list of names for redo operations available."
      },
      "state": {
        "title": "",
        "content": "state → bool (Read Only): Is undo enabled or not."
      },
      "undoStack": {
        "title": "",
        "content": "undoStack → list (Read Only): A list of names for undo operations available."
      },
      "Methods": {
        "title": "Methods",
        "content": ""
      },
      "startBlock": {
        "title": "",
        "content": "startBlock(name, enable=True)→ None: Start a named undo block. While the block is active, any script changes to TouchDesigner objects that are undoable in the editor will be added to the undo stack.\nname - The name of the block, which should briefly describe the change that would be undone.\nenable - In the rare case you want to insert a block that doesn't store undo info within a block that does, you can create a block with enable off. Example:\n# undoing this will remove the noiseTOP and noiseSOP only.\n\nui.undo.startBlock(\"constant1 r = 0\")\na = op('constant1').par.colorr = 0\nui.undo.startBlock(\"constant2 g = 0\", enable=False)\na = op('constant2').par.colorg = 0\nui.undo.endBlock()\na = op('constant3').par.colorb = 0\nui.undo.endBlock()"
      },
      "clear": {
        "title": "",
        "content": "clear()→ None: Clear undo and redo stack. This will terminate any current undo blocks."
      },
      "addCallback": {
        "title": "",
        "content": "addCallback(callback, info=None)→ None: Add a Python callback into the current undo block. \nThe callback should be defined as def yourCallbackName(isUndo, info). The isUndo argument tells if the call is an undo or a redo (the same callback is used for both) and the info argument is the same Python object passed to addCallback, and should contain any information needed to perform the undo/redo.\n\ncallback - user defined callback function. Should be defined as callback(isUndo, info)\ninfo - this argument will be passed back to user in the callback"
      },
      "redo": {
        "title": "",
        "content": "redo()→ None: Redo the next operation. This will terminate any current undo blocks."
      },
      "undo": {
        "title": "",
        "content": "undo()→ None: Undo the last operation. This will terminate any current undo blocks."
      },
      "endBlock": {
        "title": "",
        "content": "endBlock()→ None: Terminate an undo block."
      },
      "Undo_Block_Examples": {
        "title": "Undo Block Examples",
        "content": ""
      },
      "Undo_Callbacks": {
        "title": "Undo Callbacks",
        "content": ""
      }
    }
  }
}