{
  "className": "VFS_Class",
  "url": "https://docs.derivative.ca/VFS_Class",
  "content": {
    "title": "VFS Class",
    "items": {
      "Members": {
        "title": "Members",
        "content": ""
      },
      "owner": {
        "title": "",
        "content": "owner → OP (Read Only): Get the OP owner."
      },
      "Methods": {
        "title": "Methods",
        "content": ""
      },
      "[]": {
        "title": "",
        "content": "[name]→ VFSFile: VFS Files may be easily accessed using the [] syntax.\nname - Must be an exact VFS file name. Wildcards are not supported. If not found, an error will be raised.p = op('base1').vfs['Banana.tif']"
      },
      "addByteArray": {
        "title": "",
        "content": "addByteArray(byteArray, name)→ VFSFile: Add an embedded file from a bytearray to the component. Returns a VFSFile instance of the added file.  To delete the file, see destroy() on VFSFile Class.\nbyteArray - A bytearray or bytes object representing the contents of the file.\nname - The name of the file on VFS."
      },
      "addFile": {
        "title": "",
        "content": "addFile(filePath, overrideName=None)→ VFSFile: Add an embedded file from disk to the component with an option to override the name. Returns a VFSFile instance of the added file. To delete the file, see destroy() on VFSFile Class.\nfilePath - The path of the file on disk to add.\noverrideName (Keyword, Optional) - When specified, will override the name of the file in VFS."
      },
      "export": {
        "title": "",
        "content": "export(folder, pattern='*', overwrite=False)→ list: Exports any matching files to the folder on disk. If overwrite is True then any existing files on disks with the same name will be overwritten. Returns a list of paths on disk to the exported files.\nfolder - The folder on disk to export the files to.\npattern (Keyword, Optional) - The pattern to match names by.\noverwrite (Keyword, Optional) - When True, will overwrite any files that share the same name.# VFS contains one file with name 'A/B.tif'\nCOMP.vfs.export('C:/tmp') # returns ['C:/tmp/A/B.tif']"
      },
      "find": {
        "title": "",
        "content": "find(pattern='*')→ list: Finds all files in VFS with names matching the pattern. Returns a list of VFSFile objects.\npattern (Keyword, Optional) - The pattern to match names by."
      },
      "Special_Functions": {
        "title": "Special Functions",
        "content": "[edit]"
      },
      "len": {
        "title": "",
        "content": "len(VFS)→ int: Returns the total number of virtual files.\na = len(op('base1').vfs)"
      },
      "iterator": {
        "title": "",
        "content": "Iterator→ str: Iterate over each virtual file name.\nfor f in op('base1').vfs:\n\tdebug(f) # print info of all virtual files on base1 TouchDesigner Build: Latest\\n2021.10000before 2021.10000"
      }
    }
  }
}