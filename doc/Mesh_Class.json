{
  "className": "Mesh_Class",
  "url": "https://docs.derivative.ca/Mesh_Class",
  "content": {
    "title": "Mesh Class",
    "items": {
      "toc": {
        "title": "Contents\n1 Members\n2 Methods\n3 Prim Class\n3.1 Members\n3.2 Methods\n3.2.1 Special Functions",
        "content": ""
      },
      "toctogglecheckbox": {
        "title": "",
        "content": "Contents 1 Members\n2 Methods\n3 Prim Class\n3.1 Members\n3.2 Methods\n3.2.1 Special Functions"
      },
      "mw-toc-heading": {
        "title": "Contents",
        "content": "1 Members\n2 Methods\n3 Prim Class\n3.1 Members\n3.2 Methods\n3.2.1 Special Functions"
      },
      "Members": {
        "title": "Members",
        "content": ""
      },
      "closedU": {
        "title": "",
        "content": "closedU → bool (Read Only): Returns True if the mesh is closed in U, False otherwise."
      },
      "closedV": {
        "title": "",
        "content": "closedV → bool (Read Only): Returns True if the mesh is closed in V, False otherwise."
      },
      "numRows": {
        "title": "",
        "content": "numRows → int (Read Only): Number of rows in the mesh."
      },
      "numCols": {
        "title": "",
        "content": "numCols → int (Read Only): Number of columns in the mesh."
      },
      "Methods": {
        "title": "Methods",
        "content": ""
      },
      "Prim_Class": {
        "title": "Prim Class",
        "content": "[edit]"
      },
      "Members_2": {
        "title": "Members",
        "content": ""
      },
      "center": {
        "title": "",
        "content": "center → TDU.Position : Get or set the barycentric coordinate of this primitive. It is expressed as a TDU.Position object."
      },
      "index": {
        "title": "",
        "content": "index → int (Read Only): The primitive index in the list."
      },
      "normal": {
        "title": "",
        "content": "normal → TDU.Vector (Read Only): The calculated normal vector of this primitive, expressed as a TDU.Vector object."
      },
      "owner": {
        "title": "",
        "content": "owner → OP (Read Only): The OP to which this object belongs."
      },
      "weight": {
        "title": "",
        "content": "weight → float (Read Only): The associated weight of the primitive. Only certain primitives, such as those created by the Metaball SOP can modify this value from its default of 2.0."
      },
      "direction": {
        "title": "",
        "content": "direction → TDU.Vector (Read Only): A normalized vector pointing from the centroid of the SOP to the centroid of this primitive."
      },
      "min": {
        "title": "",
        "content": "min → TDU.Position (Read Only): The minimum coordinates of this primitive along each dimension, expressed as a TDU.Position object."
      },
      "max": {
        "title": "",
        "content": "max → TDU.Position (Read Only): The maximum coordinates of this primitive along each dimension, expressed as a TDU.Position object."
      },
      "size": {
        "title": "",
        "content": "size → TDU.Position (Read Only): The size of this primitive along each dimension, expressed as a TDU.Position object."
      },
      "Methods_2": {
        "title": "Methods",
        "content": ""
      },
      "destroy": {
        "title": "",
        "content": "destroy(destroyPoints=True)→ None: Destroy and remove the actual primitive this object refers to. This operation is only valid when the primitive belongs to a scriptSOP. Note: after this call, other existing Prim objects in this SOP may no longer be valid.\ndestroyPoints - (Keyword, Optional) If True, its points are destroyed as well, if false, they are simply detached. The argument is True by default."
      },
      "eval": {
        "title": "",
        "content": "eval(u, v)→ TDU.Position: Evaluate the position on the primitive given the u,v coordinates. u,v should be in the range [0,1]. Note: Polygons and curves ignore the v parameter.\ncenter = op('box1').prim[0].eval(0.5, 0.5)"
      },
      "Special_Functions": {
        "title": "Special Functions",
        "content": "[edit]"
      },
      "len": {
        "title": "",
        "content": "len(Prim)→ int: Returns the total number of vertices.\na = len(op('box1').prim[0])"
      },
      "[]": {
        "title": "",
        "content": "[row, col]→ td.Vertex: Get specific vertex from a Mesh given integer row and column values.\nv = op('grid1').prims[2,3]"
      },
      "Iterator": {
        "title": "",
        "content": "Iterator→ td.Vertex: Iterate over each vertex.\nfor m in op('box1').prims[5]:\n\t# do something with m, which is a Vertex TouchDesigner Build: Latest\\n2021.100002018.28070before 2018.28070"
      }
    }
  }
}